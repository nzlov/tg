package generate

import (
	"text/template"
)

var (
	initT = template.Must(template.New("init").Parse(`// Code generated by "tg {{.Args}}"; DO NOT EDIT.
package {{.PackageName}}

import (
	"github.com/labstack/echo/v4"
	"{{.Project}}/app/ctx"
)

func Init(e *echo.Echo) {
	r := e.Group("/{{.PackageName}}")

    {{if .Create}}
	r.POST("", ctx.Handler(Create))
    {{end}}
    {{if .Update}}
    r.POST("/:id", ctx.Handler(Update))
    {{end}}
    {{if .List}}
    r.GET("", ctx.Handler(List))
    {{end}}
    {{if .Info}}
    r.GET("/:id", ctx.Handler(Info))
    {{end}}
    {{if .Delete}}
    r.DELETE("/:id", ctx.Handler(Delete))
    {{end}}
}
`))
	cT = template.Must(template.New("c").Parse(`// Code generated by "tg {{.Args}}"; DO NOT EDIT.
package {{.PackageName}}

import (
    {{if .Delete}}
    "strings"
    {{end}}

    {{if or .Update .Info}}
    "github.com/nzlov/gorm"
    {{end}}

    "gogs.yunss.com/go/thirds/sqldb"
    "gogs.yunss.com/go/utils"

	"{{.Project}}/app/ctx"
	"{{.Project}}/app/models"
	"{{.Project}}/app/global"
)

{{if .Create}}
// @Summary create
// @Description create
// @ID {{.PackageName}}.create
// @Tags {{.PackageName}}
{{- range .CreateSecurity}}
// @Security {{.}}
{{- end}}
// @Accept  x-www-form-urlencoded
// @Produce json
{{- range .CreateParamsDecs}} 
{{.}} 
{{- end}}
// @Success    200            {object}   models.{{.Name}}
// @Resource /{{.PackageName}}
// @Router /{{.PackageName}}    [POST]
func Create(ctx *ctx.Context) global.RespModel{

    obj := models.{{.Name}}{}

    {{range .CreateBefore}}
    if err := models.{{.Name}}(ctx,ctx.DB(),&obj); err != nil {
        return global.Resp(global.CodeErrHandle,err.Error())
    }
    {{end}}

    {{range .CreateParams}}
    if o,ok:=ctx.Get{{.CtxFunc}}v("{{.JSON}}");ok && obj.{{.Name}}!=o{
        obj.{{.Name}} = o
    }
    {{end}}

    tx, err := sqldb.NewTx(ctx.DB())
	if err != nil {
        return global.Resp(global.CodeErrDB,err.Error())
	}
	defer tx.End()

    {{range .CreateTxBefore}}
    if err := models.{{.Name}}(ctx,ctx.DB(),&obj); err != nil {
        return global.Resp(global.CodeErrHandle,err.Error())
    }
    {{end}}

    {{if .CreateSave}}
	if err := tx.DB().Create(&obj).Error; err != nil {
        return global.Resp(global.CodeErrDB,err.Error())
	}
    {{end}}

    {{range .CreateTxAfter}}
    if err := models.{{.Name}}(ctx,ctx.DB(),&obj); err != nil {
        return global.Resp(global.CodeErrHandle,err.Error())
    }
    {{end}}

	if err := tx.Commit(); err != nil {
        return global.Resp(global.CodeErrDB,err.Error())
	}

    {{range .CreateAfter}}
    if err := models.{{.Name}}(ctx,ctx.DB(),&obj); err != nil {
        return global.Resp(global.CodeErrHandle,err.Error())
    }
    {{end}}
    return global.Resp(global.CodeOK, obj)
}
{{end}}
{{if .Update}}
// @Summary update
// @Description update
// @ID {{.PackageName}}.update
// @Tags {{.PackageName}}
{{- range .UpdateSecurity}}
// @Security {{.}}
{{- end}}
// @Accept  x-www-form-urlencoded
// @Produce json
// @Param      id             path       string           true   "id"
{{- range .UpdateParamsDecs}} 
{{.}} 
{{- end}}
// @Success    200            {object}   models.{{.Name}}
// @Resource /{{.PackageName}}
// @Router /{{.PackageName}}/{id}    [POST]
func Update(ctx *ctx.Context) global.RespModel {

    obj := models.{{.Name}}{}

    {{range .UpdateBefore}}
    if err := models.{{.Name}}(ctx,ctx.DB(),&obj); err != nil {
        return global.Resp(global.CodeErrHandle,err.Error())
    }
    {{end}}


	if err := ctx.DB().Where("{{.DBIndex}} = ?", ctx.ID()).First(&obj).Error; err != nil {
        if err == gorm.ErrRecordNotFound{
            return global.Resp(global.CodeErrNotFound,err.Error())
        }
        return global.Resp(global.CodeErrDB,err.Error())
	}


    {{range .UpdateParams}}
    if o,ok:=ctx.Get{{.CtxFunc}}v("{{.JSON}}");ok && obj.{{.Name}}!=o{
        obj.{{.Name}} = o
    }
    {{end}}

    tx, err := sqldb.NewTx(ctx.DB())
	if err != nil {
        return global.Resp(global.CodeErrDB,err.Error())
	}
	defer tx.End()

    {{range .UpdateTxBefore}}
    if err := models.{{.Name}}(ctx,ctx.DB(),&obj); err != nil {
        return global.Resp(global.CodeErrHandle,err.Error())
    }
    {{end}}
    

    {{if .UpdateSave}}
	if err := tx.DB().Save(&obj).Error; err != nil {
        return global.Resp(global.CodeErrDB,err.Error())
	}
    {{end}}

    {{range .UpdateTxAfter}}
    if err := models.{{.Name}}(ctx,ctx.DB(),&obj); err != nil {
        return global.Resp(global.CodeErrHandle,err.Error())
    }
    {{end}}

	if err := tx.Commit(); err != nil {
        return global.Resp(global.CodeErrDB,err.Error())
	}

    {{range .UpdateAfter}}
    if err := models.{{.Name}}(ctx,ctx.DB(),&obj); err != nil {
        return global.Resp(global.CodeErrHandle,err.Error())
    }
    {{end}}
    return global.Resp(global.CodeOK,obj)
}
{{end}}
{{if .List}}
// @Summary list
// @Description list
// @ID {{.PackageName}}.list
// @Tags {{.PackageName}}
{{- range .ListSecurity}}
// @Security {{.}}
{{- end}}
// @Produce json
// @Param        skip         query        integer        false "间隔"  mininum(0)
// @Param        limit        query        integer        false "条数"  mininum(0) maxinum(100)  default(20)
// @Param        sort         query        string         false "排序"
// @Param        fields       query        string         true  "请求字段"
// @Param        filters      query        string         false "过滤条件"
// @Success      200          {object}     models.{{.Name}}
// @Resource /{{.PackageName}}
// @Router /{{.PackageName}}       [get]
func List(ctx *ctx.Context) global.RespModel {
    objs := []models.{{.Name}}{}

    {{range .ListBefore}}
    if err := models.{{.Name}}(ctx,ctx.DB(),&objs); err != nil {
        return global.Resp(global.CodeErrHandle,err.Error())
    }
    {{end}}

    fields := utils.FiltersToMap(ctx.GetFields())

    {{if .ListPreload}}
	total, err := sqldb.FindWithJson(sqldb.Preload(ctx.DB(),fields,map[string]interface{}{
        {{- range .ListPreloadV}}
        "{{.}}",
        {{end}}
    }), new(models.{{.Name}}), &objs, ctx.GetFilters(), ctx.GetSort(), ctx.GetSkip(), ctx.GetLimit(), true)
    {{else}}
	total, err := sqldb.FindWithJson(ctx.DB(), new(models.{{.Name}}), &objs, ctx.GetFilters(), ctx.GetSort(), ctx.GetSkip(), ctx.GetLimit(), true)
    {{end}}
	if err != nil {
            return global.Resp(global.CodeErrDB,err.Error())
	}

    {{range .ListAfter}}
    if err := models.{{.Name}}(ctx,ctx.DB(),&objs); err != nil {
        return global.Resp(global.CodeErrHandle,err.Error())
    }
    {{end}}

	return global.RespsWithFileds(global.CodeOK, total, objs, ctx.AppKey, fields)
}
{{end}}
{{if .Info}}
// @Summary info
// @Description info 
// @ID {{.PackageName}}.info
// @Tags {{.PackageName}}
{{- range .InfoSecurity}}
// @Security {{.}}
{{- end}}
// @Produce  json
// @Param        id         path         string         true "id"
// @Param        fields     query        string         true  "请求字段"
// @Success      200        {object}     models.{{.Name}}
// @Resource /{{.PackageName}}
// @Router /{{.PackageName}}/{id}     [get]
func Info(ctx *ctx.Context) global.RespModel {
	obj :=models.{{.Name}}{} 
	
    {{range .InfoBefore}}
    if err := models.{{.Name}}(ctx,ctx.DB(),&obj); err != nil {
        return global.Resp(global.CodeErrHandle,err.Error())
    }
    {{end}}

    fields := utils.FiltersToMap(ctx.GetFields())

    {{if .InfoPreload}}
	if err :=sqldb.Preload(ctx.DB(),fields,map[string]interface{}{
        {{- range .InfoPreloadV}}
        "{{.}}",
        {{end}}
    }).Where("{{.DBIndex}} = ?", ctx.ID()).First(&obj).Error; err != nil {
        if err == gorm.ErrRecordNotFound{
            return global.Resp(global.CodeErrNotFound,err.Error())
        }
        return global.Resp(global.CodeErrDB,err.Error())
	}
    {{else}}
	if err :=ctx.DB().Where("{{.DBIndex}} = ?", ctx.ID()).First(&obj).Error; err != nil {
        if err == gorm.ErrRecordNotFound{
            return global.Resp(global.CodeErrNotFound,err.Error())
        }
        return global.Resp(global.CodeErrDB,err.Error())
	}
    {{end}}

    {{range .InfoAfter}}
    if err := models.{{.Name}}(ctx,ctx.DB(),&obj); err != nil {
        return global.Resp(global.CodeErrHandle,err.Error())
    }
    {{end}}

	return global.RespWithFileds(global.CodeOK, obj, ctx.AppKey, fields)
}
{{end}}
{{if .Delete}}
// @Summary delete
// @Description delete
// @ID {{.PackageName}}.delete
// @Tags {{.PackageName}}
{{- range .DeleteSecurity}}
// @Security {{.}}
{{- end}}
// @Accept  x-www-form-urlencoded
// @Param        id               path       string    true "id"
// @Success      200              {string}   string
// @Resource     /{{.PackageName}}
// @Router       /{{.PackageName}}/{id} [DELETE]
func Delete(ctx *ctx.Context) global.RespModel {

    ids := strings.Split(ctx.ID(), ",")

    {{range .DeleteBefore}}
    if err := models.{{.Name}}(ctx,ctx.DB(),ids); err != nil {
        return global.Resp(global.CodeErrHandle,err.Error())
    }
    {{end}}

	num := sqldb.Count(ctx.DB().Where("{{.DBIndex}} in (?)", ids), new(models.{{.Name}}), true)

	if int(num) != len(ids) {
        return global.Resp(global.CodeErrParam,"id")
	}

	tx, err := sqldb.NewTx(ctx.DB())
	if err != nil {
        return global.Resp(global.CodeErrDB,err.Error())
	}
	defer tx.End()

    {{range .DeleteTxBefore}}
    if err := models.{{.Name}}(ctx,ctx.DB(),ids); err != nil {
        return global.Resp(global.CodeErrHandle,err.Error())
    }
    {{end}}

	if err := tx.DB().Delete(new(models.{{.Name}}),"{{.DBIndex}} in (?)", ids).Error; err != nil {
        return global.Resp(global.CodeErrDB,err.Error())
	}

    {{range .DeleteTxAfter}}
    if err := models.{{.Name}}(ctx,ctx.DB(),ids); err != nil {
        return global.Resp(global.CodeErrHandle,err.Error())
    }
    {{end}}

	if err := tx.Commit(); err != nil {
        return global.Resp(global.CodeErrDB,err.Error())
	}

    {{range .DeleteAfter}}
    if err := models.{{.Name}}(ctx,ctx.DB(),ids); err != nil {
        return global.Resp(global.CodeErrHandleHandle,err.Error())
    }
    {{end}}

    return global.Resp(global.CodeOK,"")
}
{{end}}
`))
)
